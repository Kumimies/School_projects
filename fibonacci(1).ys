# TKJ-harjoitustyö 2023 Fibonacci
# Jimi Gustafsson, 2207779, jimi.gustafsson@edu.oulu.fi
#
# Pohdinta:
# - Ajonaikaisten käskyjen määrä yhdellä syötteellä (233) huonoimmassa tapauksessa koodin ollessa rikki oli noin 15000 askelta.
# - Tämä tosin tajuttuani että syöte oli isompi fibonaccin luku ja Lovelace antoi virheen koska koodini ei pysty käsittelemään niin isoa lukua.
# - Isojen neliöjuureen menevien lukujen takia bittimäärää piti nostaa kuudestatoista kolmeenkytäkahteen...
# - Onneksi koodi on kuitenkin optimoitu niin että ei pitäisi montaa lisävaihetta tulla pienempien lukujen kanssa.
# - Testitapauksilla, näillä pienillä luvuilla voi siis hyvinkin mennä alle 30000 askeleen.
# - Koodihan tosiaan laskee ennen ensimmäistä jakamista (while bit>num) montako kertaa pitää tuo bit jakaa neljällä ennen kuin lähdetään varsinaisesti jakamaan.
# - Iso pullonkaula toteutuksessa kuitenkin on tuo neliöjuurioperaatio, erityisesti se montako kertaa se toteutetaan suorituksen aikana.
# - Ehkä jos olisi enemmän aikaa siihen olisi voinut keksiä lisää optimointia nimenomaan tätä -4 +4 tapausta varten. Ehkä sen olisi saanut
# - haarautettua jossain kohtaa kun huomataan eroavaisuutta arvoissa. 
# - Shiftaaminen oikealle on varsin työlästä ja identtiset vaiheet jos saisi tehtyä yhtä aikaa lyhentäisi operaatiota merkittävästi.
# - Peasant multiplication taas siihen voi olla tyytyväinen. Se toimii tässä tehtävässä erinomaisesti, kun kertojan (rbx) voi määrittää itse (vitonen tai kerrottava).
# - MSB:tä kohti bittisiirto on todella helppo. luku + luku = luku << 1
# 
# - Suurimman osan optimointia olin onneksi tehnyt ennen tämän tekoon ryhtymistä.
# - Neliöjuurilaskennasta kerroin ylempänä mutta lisämainintana tuo bignumber loopin sisällä oleva "nollaskip"
# - joka jättää turhan 64kpl bitshiftin oikealle tekemättä jos inputtina on vain nollaa.
# - Oikeastaan ainut mahdollinen optimointi kertofunktioon voisi olla kertaa viisi integrointi suoraan funktioon.
# - Siitä saisi muutamiset sataa käskyä pienemmäksi.
# - Edit 16.12.23. Toteutin viidellä kerronnan uudestaan paljon nopeammin. Pari bitshiftiä vasemmalle johon lisätään päälle yhden kerran kopio.

# Tästä alkaa koodi
main:
#Alkuun tällaista perus alustusta, ykköstä ja kasia vakioina tarvitaan paljon.
#Neliöjuuri ja kertofunktiot on toteutettu niin että rdx (ja kertolaskussa myös rbx) ovat syötteitä ja rsi on output
    irmovq $1, %r10
    irmovq $8, %r8
    irmovq 0x15f8, %rsp #tämä työnnetty kauas vain koska muuten call ei toimi (emme hyödynnä rsp:tä)
    
isfibonacci:
    mrmovq (%r11), %rdx #tämä on inputtina kaikissa operaatioissa
    
    #rdx vastaa vielä r11 viittaamaa arvoa, jos (%r11) on 0, lukujono käyty läpi
    andq %rdx, %rdx
    je ready
    
    #(%r11) ei nolla, muodostetaan 5*x^2
    rrmovq %rdx, %rbx      #rdx ja rbx ovat kertolaskun syötteet.
    call multiply    #palautusarvo on rsi
    
	#kerrotaan vielä x^2 viidellä.
	#Todetaan että näin on nopeampi kertoa
    rrmovq %rsi, %rbx
    addq %rsi, %rsi
    addq %rsi, %rsi
    addq %rbx, %rsi
	
	#Nyt on kerrottu, aloitetaan kokeilemalla onko täydellinen neliö kun vähennetään ensin 4
	irmovq $4, %rbx
	subq %rbx, %rsi
	rrmovq %rsi, %rdi
	rrmovq %rdi, %rdx #tallennetaan arvo ennen kertomista niin voidaan verrata
	call squareroot
	
	#Nyt on otettu neliöjuuri kerrotaan potenssiin kaksi ja katsotaan jäikö jakojäännöstä
	rrmovq %rsi, %rdx
	rrmovq %rdx, %rbx
	call multiply
	
	#Suoritetaan vertaus jos s*s=x -> ei jakojäännöstä -> fibonaccin luku
	
	subq %rdi, %rsi
	#jos tosi siirrytään seuraavaan lukuun jonossa
	je itisfibonacci
	
	#ei tärpännyt, nyt kokeillaan josko 5x^2+4 olisi täydellinen neliö, rdi oli 5x^2-4 niin lisätään 8
	addq %r8, %rdi
	rrmovq %rdi, %rdx
	
	call squareroot
	rrmovq %rsi, %rdx
	rrmovq %rdx, %rbx
	call multiply
	
	#nyt jos ei tulos ole nolla tiedetään ettei tämä ole fibonacci luku ja tämän koodin suoritus voidaan viimeistellä
	subq %rdi, %rsi
	jne ready
	
	#Nyt saatiin täydellinen neliö -> alk.per. luku on fibonaccin luku -> Lähdetään kokeilemaan seuraavaa
	
    jmp itisfibonacci











multiply:
    #rdx on input1
    #rbx on input 2
    #rsi PALAUTUSARVO
    irmovq $64, %r14 
	irmovq $0, %rsi
    
    loop:
        #kaksi seuraavaa ovat sitä varten jos MSB 1 (näitä lisätään yhteen ja vähennetään emme halua alkuperäisten arvojen muuttuvan)
        rrmovq %rdx, %r13
        rrmovq %r14, %r9
        
        andq %rbx, %rbx #Katsotaan onko MSB 1
        jl addition1
        
        return:
            #todetaan yhden iteraation olevan tehty, valmistellaan seuraava
            addq %rbx,%rbx #rbx << 1
            subq %r10,%r14
            jne loop #jos r14 ei nolla hypätään looppiin
            ret #r14=0 eli voidaan lopettaa kertolasku
        
    addition1:
        subq %r10, %r9 #Tämä tehdään heti alussa koska mahdollinen x*2^0 on edelleen x mikä lisätään tulokseen
        je addition2
        addq %r13, %r13
        jmp addition1
    
    addition2:
        addq %r13, %rsi
        jmp return

squareroot:
	irmovq 0x100000000, %rax #ylaraja 1 << 32 eli 4294967296 eli bit
	#rdx on input eli minkä neliöjuuri lasketaan
	irmovq $0, %rsi #tulos eli res
	irmovq $2, %rbx #alustetaan ensimmäinen jakolaskun käyttämä jako 2^rbx

    rrmovq %rdx, %r12
    addq %r12, %r12
    addq %r12, %r12
    rrmovq %rax, %r13
    subq %r12, %r13
    jle initdiv #Jos vain kerran neljällä jakaminen (bit >> 2) riittää pysähdytään tähän ja aletaan suorittaa.
    quadruple:
		#r12 nelinkertaistaa itsensä
		rrmovq %rax, %r13
		addq %r12, %r12
		addq %r12, %r12
		addq %r10, %rbx
		addq %r10, %rbx
		subq %r12, %r13
		#siirrytään jakotoimituksiin kun r12 suurempi kuin rax kopio r13
		jle initdiv
		
		#jos r12 pienempi, todetaan että pitää jakaa nelosella +1 kertaa enemmän
		jmp quadruple
    
    initdiv:
        rrmovq %rax, %r12 #Halutaan laskea rax (bit) arvolla div_oppia, r12 on div_op input
        call div_op
        rrmovq %rcx, %rax

divideandcompare:
#Nyt ollaan ensimmäinen while loop suoritettu ja bit<num

    #r12=res+bit jota tarvitaan
    rrmovq %rsi, %r12
    addq %rax, %r12
    rrmovq %rdx, %r9
	
	#Onko num isompi kuin res+bit
    subq %r12, %r9
    #num >= res + bit
    jge bignumber
    
    #num < res + bit eli ei ollut jos tähän tullaan. eli suoritetaan res >> 1
    rrmovq %rsi, %r12
    irmovq $1, %rbx
    call div_op
    rrmovq %rcx,%rsi
    jmp bitShift

  
bignumber:
    #num >= res+bit eli vähennetään tämänhetkinen tulos ja bit inputista
    subq %r12, %rdx
    andq %rsi, %rsi
	#Jos todetaan että ei olla saatu tulokseen vielä mitään niin turhahan se on alkaa right shiftailee.
    je nollaskip
	
    rrmovq %rsi, %r12
    irmovq $1, %rbx
    call div_op
    rrmovq %rcx,%rsi
    nollaskip:
	#Riippumatta siitä tehtiinkö right shift vai ei halutaan kuitenkin lisätä bit tulokseen.
    addq %rax, %rsi
    
bitShift:
	#Joka iteraatiion kuuluu bitin right shiftiä >> 2
    rrmovq %rax, %r12
    irmovq $2, %rbx
    call div_op
    rrmovq %rcx,%rax
    
    #(bit != 0)=looppaa alkuun muuten päättyy ja neliöjuureen laskenta tehty.
    andq %rax,%rax
    jne divideandcompare
    ret



#Tästä on annettava crediitti Peter Cordesille Stackoverflowssa
#Olen hänen koodiansa muokannut ja soveltanut
#https://stackoverflow.com/questions/55539625/how-to-perform-right-shift-in-y86-64-or-other-toy-isas-with-add-and-but-no-na
div_op:
    #r12 on jaettava
    #rbx= montako kertaa jaetaan r12 2^rbx:llä
    #rcx PALAUTUSARVO
    
    
    
    irmovq $64, %r14
    irmovq $0, %rcx #tähän muodostuu tulos
    subq %rbx, %r14
    
    rshift:
        # Double %rcx
        addq %rcx, %rcx
        # Check if the most significant bit of %r12 is 1
        andq %r12, %r12
        jge MSB_zero
        # If it is, xor %r10 and %rcx
        xorq %r10, %rcx

    MSB_zero:
        # Shift %r12 to the left
        addq %r12, %r12
        # Subtract 1 from %r14 and repeat if not zero
        subq %r10, %r14
        jne rshift
        ret
		
ready:
	#Ollaan saatu joko nolla jonosta tai todettu tarkasteltavan luvun kohdalla ettei se ole fibonacci luku.
	#Oli miten oli annetaan arvo raxille.
    mrmovq (%r11), %rax
    halt
    
itisfibonacci:
	#Luku jota käsiteltiin oli fibonaccin luku, mainiota. Aletaan tarkastelemaan seuraavaa lukua jonossa.
    addq %r8, %r11
    jmp isfibonacci

.pos 0x700
array:
